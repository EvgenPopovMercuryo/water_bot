from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, JobQueue
from datetime import datetime, timedelta
import sqlite3
import os
import pytz

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = os.path.join(os.getenv('DATA_DIR', ''), 'water_bot.db')

def init_database():
    if not os.path.exists(DB_PATH):
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE water_intake (
                user_id INTEGER,
                amount INTEGER,
                timestamp DATETIME,
                PRIMARY KEY (user_id, timestamp)
            )
        ''')
        cursor.execute('''
            CREATE TABLE reminders (
                user_id INTEGER PRIMARY KEY,
                start_time TEXT,
                end_time TEXT,
                interval INTEGER,
                is_active BOOLEAN
            )
        ''')
        conn.commit()
        conn.close()

def add_water_record(user_id: int, amount: int):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO water_intake (user_id, amount, timestamp)
        VALUES (?, ?, ?)
    ''', (user_id, amount, datetime.now()))
    conn.commit()
    conn.close()

def get_statistics(user_id: int):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    today = datetime.now().date()
    cursor.execute('''
        SELECT SUM(amount)
        FROM water_intake
        WHERE user_id = ? AND date(timestamp) = ?
    ''', (user_id, today))
    today_amount = cursor.fetchone()[0] or 0
    week_ago = today - timedelta(days=7)
    cursor.execute('''
        SELECT date(timestamp), SUM(amount)
        FROM water_intake
        WHERE user_id = ? AND date(timestamp) > ?
        GROUP BY date(timestamp)
        ORDER BY date(timestamp)
    ''', (user_id, week_ago))
    weekly_data = cursor.fetchall()
    conn.close()
    return today_amount, weekly_data

def set_reminder_settings(user_id: int, start_time: str, end_time: str, interval: int):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO reminders 
        (user_id, start_time, end_time, interval, is_active)
        VALUES (?, ?, ?, ?, TRUE)
    ''', (user_id, start_time, end_time, interval))
    conn.commit()
    conn.close()

def get_reminder_settings(user_id: int):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('SELECT start_time, end_time, interval, is_active FROM reminders WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result

def get_water_keyboard():
    keyboard = [
        ['‚òïÔ∏è 200 –º–ª', 'ü•§ 300 –º–ª', 'ü´ó 500 –º–ª'],
        ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è', 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é'],
        ['‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', 'üîï –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è']
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def format_weekly_stats(weekly_data):
    if not weekly_data:
        return "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥–µ."
    total = 0
    days_count = 0
    result = "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n\n"
    for date_str, amount in weekly_data:
        date = datetime.strptime(date_str, '%Y-%m-%d').date()
        day_name = date.strftime('%A')
        total += amount
        days_count += 1
        result += f"{day_name}: {amount} –º–ª\n"
    average = total // days_count if days_count > 0 else 0
    result += f"\n–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {average} –º–ª –≤ –¥–µ–Ω—å"
    return result

async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    user_id = job.data['user_id']
    moscow_tz = pytz.timezone('Europe/Moscow')
    current_time = datetime.now(moscow_tz).time()
    settings = get_reminder_settings(user_id)
    if not settings:
        return
    start_time = datetime.strptime(settings[0], '%H:%M').time()
    end_time = datetime.strptime(settings[1], '%H:%M').time()
    if start_time <= current_time <= end_time:
        today_amount, _ = get_statistics(user_id)
        await context.bot.send_message(
            user_id,
            f'üö∞ –í—Ä–µ–º—è –ø–∏—Ç—å –≤–æ–¥—É! –°–µ–≥–æ–¥–Ω—è –≤—ã –≤—ã–ø–∏–ª–∏: {today_amount} –º–ª\n'
            f'–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –Ω–æ—Ä–º–∞: 2000 –º–ª –≤ –¥–µ–Ω—å'
        )

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.from_user.first_name
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç, {name}! üëã\n'
        '–Ø –±–æ—Ç –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã! üíß\n'
        '–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã –∏–ª–∏ –≤–≤–µ–¥–∏ –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, "200" –∏–ª–∏ "250 –º–ª")\n\n'
        '–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /remind –∏–ª–∏ –∫–Ω–æ–ø–∫—É "‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"',
        reply_markup=get_water_keyboard()
    )

async def remind_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        start_time = context.args[0]
        end_time = context.args[1]
        interval = int(context.args[2])
        if interval < 30:
            await update.message.reply_text('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª - 30 –º–∏–Ω—É—Ç!')
            return
        user_id = update.message.from_user.id
        set_reminder_settings(user_id, start_time, end_time, interval)
        current_jobs = context.job_queue.get_jobs_by_name(str(user_id))
        for job in current_jobs:
            job.schedule_removal()
        context.job_queue.run_repeating(
            send_reminder,
            interval=interval * 60,
            first=1,
            name=str(user_id),
            data={'user_id': user_id}
        )
        await update.message.reply_text(
            f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!\n'
            f'–í—Ä–µ–º—è: —Å {start_time} –¥–æ {end_time}\n'
            f'–ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} –º–∏–Ω—É—Ç'
        )
    except (IndexError, ValueError):
        await update.message.reply_text(
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n/remind 09:00 22:00 120'
        )

async def handle_water_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    if text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è':
        today_amount, _ = get_statistics(user_id)
        await update.message.reply_text(
            f'–°–µ–≥–æ–¥–Ω—è —Ç—ã –≤—ã–ø–∏–ª: {today_amount} –º–ª –≤–æ–¥—ã üíß\n'
            f'{"üëç –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!" if today_amount >= 2000 else "–ù–µ –∑–∞–±—ã–≤–∞–π –ø–∏—Ç—å –±–æ–ª—å—à–µ –≤–æ–¥—ã! üí™"}',
            reply_markup=get_water_keyboard()
        )
        return
    
    elif text == 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é':
        _, weekly_data = get_statistics(user_id)
        stats_message = format_weekly_stats(weekly_data)
        await update.message.reply_text(
            stats_message,
            reply_markup=get_water_keyboard()
        )
        return
    
    elif text == '‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è':
        await update.message.reply_text(
            '–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n'
            '/remind 09:00 22:00 120\n'
            '–≥–¥–µ:\n'
            '09:00 - –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n'
            '22:00 - –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n'
            '120 - –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö –º–µ–∂–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏'
        )
        return
    
    elif text == 'üîï –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è':
        current_jobs = context.job_queue.get_jobs_by_name(str(user_id))
        for job in current_jobs:
            job.schedule_removal()
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('UPDATE reminders SET is_active = FALSE WHERE user_id = ?', (user_id,))
        conn.commit()
        conn.close()
        await update.message.reply_text('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã!')
        return

    try:
        if '200' in text:
            amount = 200
        elif '300' in text:
            amount = 300
        elif '500' in text:
            amount = 500
        else:
            amount = int(''.join(filter(str.isdigit, text)))
        
        if amount <= 0 or amount > 2000:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã")

        add_water_record(user_id, amount)
        today_amount, _ = get_statistics(user_id)

        await update.message.reply_text(
            f'–î–æ–±–∞–≤–ª–µ–Ω–æ {amount} –º–ª –≤–æ–¥—ã! üíß\n'
            f'–í—Å–µ–≥–æ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {today_amount} –º–ª',
            reply_markup=get_water_keyboard()
        )

    except (ValueError, TypeError):
        await update.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "200" –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É)',
            reply_markup=get_water_keyboard()
        )

def main():
    print('–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...')
    init_database()
    app = Application.builder().token('7832116453:AAELa5zby6f3Tld8yqLmnftsdAtsmHoZ9lU').build()
    app.add_handler(CommandHandler('start', start_command))
    app.add_handler(CommandHandler('remind', remind_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_water_input))
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
    app.run_polling()

if __name__ == '__main__':
    main()
